name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'Angular/Tuto-Angular/package-lock.json'
    
    - name: Install dependencies
      working-directory: Angular/Tuto-Angular
      run: npm ci
    
    - name: Run linting
      working-directory: Angular/Tuto-Angular
      run: npm run lint
    
    - name: Run tests
      working-directory: Angular/Tuto-Angular
      run: npm run test:ci
    
    - name: Build application
      working-directory: Angular/Tuto-Angular
      run: npm run build:prod
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-dist
        path: Angular/Tuto-Angular/dist/

  test-backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      working-directory: Angular/Tuto-Angular/backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio
    
    - name: Run tests
      working-directory: Angular/Tuto-Angular/backend
      run: pytest
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
    
    - name: Build Docker image
      working-directory: Angular/Tuto-Angular/backend
      run: docker build -t tuto-angular-backend .

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'Angular/Tuto-Angular/package-lock.json'
    
    - name: Install dependencies
      working-directory: Angular/Tuto-Angular
      run: npm ci
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: Angular/Tuto-Angular/dist/
    
    - name: Run e2e tests
      working-directory: Angular/Tuto-Angular
      run: npm run e2e

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend, e2e-tests]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: Angular/Tuto-Angular/dist/
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend, e2e-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: Angular/Tuto-Angular/dist/
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
    
    - name: Notify deployment
      run: |
        echo "Production deployment completed successfully!"
        # Add notification logic here (Slack, email, etc.)
