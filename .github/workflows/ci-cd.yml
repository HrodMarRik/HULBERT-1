name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Tests Backend
  test-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install backend dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run backend tests
        run: |
          cd backend
          pytest --cov=app --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

      - name: Lint backend code
        run: |
          cd backend
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check .

  # Job 2: Tests Frontend
  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: domains/informatique/02-projects/portfolio/Portfolio/angular-portfolio/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd domains/informatique/02-projects/portfolio/Portfolio/angular-portfolio
          npm ci

      - name: Run frontend tests
        run: |
          cd domains/informatique/02-projects/portfolio/Portfolio/angular-portfolio
          npm run test -- --no-watch --no-progress --browsers=ChromeHeadlessCI

      - name: Lint frontend code
        run: |
          cd domains/informatique/02-projects/portfolio/Portfolio/angular-portfolio
          npm run lint

      - name: Build frontend
        run: |
          cd domains/informatique/02-projects/portfolio/Portfolio/angular-portfolio
          npm run build -- --configuration=production

  # Job 3: Build Docker Images
  build-images:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./domains/informatique/02-projects/portfolio/Portfolio/angular-portfolio
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 4: Deploy to Staging (dÃ©sactivÃ© - dÃ©ploiement uniquement sur main)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-images]
    if: false  # DÃ©sactivÃ© - dÃ©ploiement uniquement sur main
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Staging VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /home/debian/HULBERT-1
            
            # Pull latest changes
            git pull origin develop
            
            # Update environment variables
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            echo "ENVIRONMENT=staging" >> .env
            
            # Pull latest Docker images
            docker-compose -f docker-compose.prod.yml pull
            
            # Deploy
            docker-compose -f docker-compose.prod.yml up -d --build
            
            # Run database migrations
            docker-compose -f docker-compose.prod.yml exec -T backend alembic upgrade head
            
            # Health check
            sleep 30
            curl -f http://localhost/api/health || exit 1
            
            echo "âœ… Staging deployment completed"

      - name: Notify deployment success
        if: success()
        run: |
          echo "ðŸš€ Staging deployment successful!"
          # Add Slack/Discord notification here if configured

  # Job 5: Deploy to Production (uniquement sur main)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Production VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /home/debian/HULBERT-1
            
            # Create backup before deployment
            ./scripts/backup.sh
            
            # Pull latest changes
            git pull origin main
            
            # Update environment variables
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            echo "ENVIRONMENT=production" >> .env
            
            # Pull latest Docker images
            docker-compose -f docker-compose.prod.yml pull
            
            # Deploy with zero-downtime
            docker-compose -f docker-compose.prod.yml up -d --build --no-deps backend
            sleep 10
            docker-compose -f docker-compose.prod.yml up -d --build --no-deps frontend
            sleep 10
            docker-compose -f docker-compose.prod.yml up -d --build --no-deps nginx
            
            # Run database migrations
            docker-compose -f docker-compose.prod.yml exec -T backend alembic upgrade head
            
            # Health check
            sleep 30
            curl -f http://localhost/api/health || exit 1
            
            # Clean up old images
            docker image prune -f
            
            echo "âœ… Production deployment completed"

      - name: Notify deployment success
        if: success()
        run: |
          echo "ðŸŽ‰ Production deployment successful!"
          # Add Slack/Discord notification here if configured

  # Job 6: Security Scan (optionnel)
  security-scan:
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'