#!/bin/bash
set -e

echo "üöÄ D√©ploiement HULBERT-1"

# Variables
PROJECT_DIR="/home/debian/HULBERT-1"
BACKUP_DIR="/home/debian/backups"
DATE=$(date +%Y%m%d_%H%M%S)

# Fonction de backup
backup_database() {
    echo "üíæ Cr√©ation du backup..."
    mkdir -p $BACKUP_DIR
    
    # Backup de la base de donn√©es
    docker-compose -f $PROJECT_DIR/docker-compose.prod.yml exec -T postgres pg_dump -U hulbert hulbert_db | gzip > $BACKUP_DIR/db_$DATE.sql.gz
    
    # Garder seulement les 7 derniers jours
    find $BACKUP_DIR -name "db_*.sql.gz" -mtime +7 -delete
    
    echo "‚úÖ Backup cr√©√©: db_$DATE.sql.gz"
}

# Fonction de rollback
rollback() {
    echo "üîÑ Rollback en cours..."
    LATEST_BACKUP=$(ls -t $BACKUP_DIR/db_*.sql.gz | head -n1)
    
    if [ -f "$LATEST_BACKUP" ]; then
        echo "Restauration depuis: $LATEST_BACKUP"
        gunzip -c $LATEST_BACKUP | docker-compose -f $PROJECT_DIR/docker-compose.prod.yml exec -T postgres psql -U hulbert hulbert_db
        echo "‚úÖ Rollback termin√©"
    else
        echo "‚ùå Aucun backup trouv√©"
        exit 1
    fi
}

# Fonction de health check
health_check() {
    echo "üè• V√©rification de la sant√© des services..."
    
    # Attendre que les services soient pr√™ts
    sleep 30
    
    # V√©rifier l'API
    if curl -f http://localhost/api/health; then
        echo "‚úÖ API accessible"
    else
        echo "‚ùå API non accessible"
        return 1
    fi
    
    # V√©rifier les services Docker
    if docker-compose -f $PROJECT_DIR/docker-compose.prod.yml ps | grep -q "Up"; then
        echo "‚úÖ Services Docker en cours d'ex√©cution"
    else
        echo "‚ùå Probl√®me avec les services Docker"
        return 1
    fi
}

# Fonction principale de d√©ploiement
deploy() {
    echo "üì• R√©cup√©ration des derni√®res modifications..."
    cd $PROJECT_DIR
    git pull origin main
    
    echo "üî® Construction et d√©ploiement..."
    
    # Pull des derni√®res images Docker
    docker-compose -f docker-compose.prod.yml pull
    
    # D√©ploiement avec z√©ro downtime
    echo "üîÑ D√©ploiement backend..."
    docker-compose -f docker-compose.prod.yml up -d --build --no-deps backend
    
    echo "‚è≥ Attente du d√©marrage backend..."
    sleep 15
    
    echo "üîÑ D√©ploiement frontend..."
    docker-compose -f docker-compose.prod.yml up -d --build --no-deps frontend
    
    echo "‚è≥ Attente du d√©marrage frontend..."
    sleep 15
    
    echo "üîÑ D√©ploiement nginx..."
    docker-compose -f docker-compose.prod.yml up -d --build --no-deps nginx
    
    echo "üóÑÔ∏è Ex√©cution des migrations de base de donn√©es..."
    docker-compose -f docker-compose.prod.yml exec -T backend alembic upgrade head
    
    echo "üßπ Nettoyage des anciennes images..."
    docker image prune -f
    
    echo "‚úÖ D√©ploiement termin√©"
}

# Fonction de monitoring
monitor() {
    echo "üìä √âtat des services HULBERT-1"
    echo "================================"
    
    # Services Docker
    echo "üê≥ Services Docker:"
    docker-compose -f $PROJECT_DIR/docker-compose.prod.yml ps
    
    echo ""
    echo "üíæ Utilisation des volumes:"
    docker system df -v
    
    echo ""
    echo "üìà Ressources syst√®me:"
    echo "CPU: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | awk -F'%' '{print $1}')"
    echo "RAM: $(free -h | awk 'NR==2{printf "%.1f%%", $3*100/$2 }')"
    echo "Disk: $(df -h / | awk 'NR==2{print $5}')"
    
    echo ""
    echo "üåê Sant√© de l'application:"
    if curl -s -f http://localhost/api/health > /dev/null; then
        echo "‚úÖ Application accessible"
    else
        echo "‚ùå Application non accessible"
    fi
}

# Fonction de logs
show_logs() {
    echo "üìã Logs des services:"
    docker-compose -f $PROJECT_DIR/docker-compose.prod.yml logs --tail=50
}

# Menu principal
case "${1:-deploy}" in
    "deploy")
        backup_database
        deploy
        health_check
        ;;
    "rollback")
        rollback
        ;;
    "monitor")
        monitor
        ;;
    "logs")
        show_logs
        ;;
    "health")
        health_check
        ;;
    "backup")
        backup_database
        ;;
    *)
        echo "Usage: $0 {deploy|rollback|monitor|logs|health|backup}"
        echo ""
        echo "Commands:"
        echo "  deploy   - D√©ployer l'application (d√©faut)"
        echo "  rollback - Restaurer depuis le dernier backup"
        echo "  monitor  - Afficher l'√©tat des services"
        echo "  logs     - Afficher les logs"
        echo "  health   - V√©rifier la sant√© de l'application"
        echo "  backup   - Cr√©er un backup de la base de donn√©es"
        exit 1
        ;;
esac
